hydra:
  run:
    dir: ${...output_dir}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - country=NZ,Switzerland
  job:
    name: preprocess_ffl
    chdir: null
    override_dirname: country=NZ,Switzerland
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /run/netsop/u/home-sam/home/rsulzer/remote_python/pixelspointspolygons
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /run/netsop/u/home-sam/home/rsulzer/remote_python/pixelspointspolygons/config
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      experiment: ffl_fusion
      model@experiment.model: ffl
      encoder@experiment.encoder: early_fusion_vit_cnn
      dataset: lidarpoly
      polygonization: asm_acm
      run_type: release
      host: gin
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
host:
  name: gin
  data_root: /data/rsulzer
  update_pbar_every: 1
run_type:
  name: release
  batch_size: 16
  train_subset: null
  val_subset: null
  test_subset: null
  logging: INFO
  num_workers: 16
  log_to_wandb: true
polygonization:
  method:
  - acm
  common_params:
    init_data_level: 0.5
  simple_method:
    data_level: 0.5
    tolerance:
    - 1.0
    seg_threshold: 0.5
    min_area: 10
  asm_method:
    init_method: skeleton
    data_level: 0.5
    loss_params:
      coefs:
        step_thresholds:
        - 0
        - 100
        - 200
        - 300
        data:
        - 1.0
        - 0.1
        - 0.0
        - 0.0
        crossfield:
        - 0.0
        - 0.05
        - 0.0
        - 0.0
        length:
        - 0.1
        - 0.01
        - 0.0
        - 0.0
        curvature:
        - 0.0
        - 0.0
        - 1.0
        - 0.0
        corner:
        - 0.0
        - 0.0
        - 0.5
        - 0.0
        junction:
        - 0.0
        - 0.0
        - 0.5
        - 0.0
      curvature_dissimilarity_threshold: 2
      corner_angles:
      - 45
      - 90
      - 135
      corner_angle_threshold: 22.5
      junction_angles:
      - 0
      - 45
      - 90
      - 135
      junction_angle_weights:
      - 1
      - 0.01
      - 0.1
      - 0.01
      junction_angle_threshold: 22.5
    lr: 0.1
    gamma: 0.995
    device: cuda
    tolerance:
    - 1
    seg_threshold: 0.5
    min_area: 10
  acm_method:
    steps: 500
    data_level: 0.5
    data_coef: 0.1
    length_coef: 0.4
    crossfield_coef: 0.5
    poly_lr: 0.01
    warmup_iters: 100
    warmup_factor: 0.1
    device: cuda
    tolerance:
    - 1
    seg_threshold: 0.5
    min_area: 10
dataset:
  name: lidarpoly
  size: ${..experiment.encoder.in_size}
  path: ${host.data_root}/${.name}/${.size}
  annotations:
    train: ${..path}/annotations_${...country}_train.json
    val: ${..path}/annotations_${...country}_val.json
    test: ${..path}/annotations_${...country}_test.json
  ffl_stats:
    train: ${..path}/ffl/train/stats-${...country}.pt
    val: ${..path}/ffl/val/stats-${...country}.pt
    test: ${..path}/ffl/test/stats-${...country}.pt
  train_subset: ${..run_type.train_subset}
  val_subset: ${..run_type.val_subset}
  test_subset: ${..run_type.test_subset}
  augmentations:
  - D4
experiment:
  encoder:
    name: early_fusion_vit_cnn
    use_images: true
    use_lidar: true
    in_size: 224
    in_height: ${.in_size}
    in_width: ${.in_size}
    in_voxel_size:
      x: 8
      'y': 8
      z: 100
    max_num_points_per_voxel: 64
    max_num_voxels:
      train: 784
      test: 784
    out_feature_size: ${..model.decoder.in_feature_size}
    out_feature_height: ${.out_feature_size}
    out_feature_width: ${.out_feature_size}
    out_feature_dim: ${..model.decoder.in_feature_dim}
    vit:
      type: vit_small_patch${..patch_size}_${..in_size}.dino
      checkpoint_file: ${....host.data_root}/checkpoints/backbones/dino_deitsmall8_pretrain.pth
      pretrained: true
    patch_size: 8
    patch_feature_size: 28
    patch_feature_height: ${.patch_feature_size}
    patch_feature_width: ${.patch_feature_size}
    patch_feature_dim: 384
    image_mean:
    - 0.0
    - 0.0
    - 0.0
    image_std:
    - 1.0
    - 1.0
    - 1.0
    image_max_pixel_value: 255.0
    augmentations:
    - D4
    - ColorJitter
    - GaussNoise
    - Normalize
    max_points_per_voxel: 64
  model:
    name: ffl
    compute_seg: true
    compute_crossfield: true
    seg:
      compute_interior: true
      compute_edge: false
      compute_vertex: false
    decoder:
      in_feature_size: ${...encoder.in_size}
      in_feature_width: ${.in_feature_size}
      in_feature_height: ${.in_feature_size}
      in_feature_dim: ${if:${eq:${.in_feature_size},512}, 32, 256}
    point_pillars:
      out_channels:
      - ${...decoder.in_feature_dim}
      - ${...decoder.in_feature_dim}
      - ${...decoder.in_feature_dim}]
      upsample_strides:
      - 4
      - 8
      - 16
    loss:
      multi:
        epoch_thresholds:
        - 0
        - 5
        - 10
        weights:
          seg: 1
          crossfield_align: 1
          crossfield_align90: 0.5
          crossfield_smooth: 0.005
          seg_interior_crossfield:
          - 0
          - 0
          - 0.2
          seg_edge_crossfield:
          - 0
          - 0
          - 0.2
          seg_edge_interior:
          - 0
          - 0
          - 0.2
      seg:
        bce_coef: 1.0
        dice_coef: 0.2
        use_freq: false
        use_dist: false
        use_size: false
        w0: 50
        sigma: 10
        type: bool
    batch_size: ${...run_type.batch_size}
    start_epoch: 0
    num_epochs: 200
    milestone: 0
    learning_rate: 0.0001
    weight_decay: 0.0
    gamma: 0.95
    eval:
      patch_size: null
      patch_overlap: 200
      seg_threshold: 0.5
  name: v4_fusion_bs4x16_mnv64
  group_name: v2_${.model.name}
output_dir: ${.host.data_root}/${.experiment.model.name}_outputs/${.dataset.name}/${.experiment.encoder.in_size}/${.experiment.name}
checkpoint: null
checkpoint_file: null
save_best: true
save_latest: true
save_every: 10
val_every: 1
best_val_loss: 10000000.0
best_val_iou: 0.0
multi_gpu: false
device: cuda
log_to_wandb: ${.run_type.log_to_wandb}
num_workers: ${.run_type.num_workers}
update_pbar_every: ${.host.update_pbar_every}
country: Switzerland
use_lidar: ${.experiment.encoder.use_lidar}
use_images: ${.experiment.encoder.use_images}
eval:
  split: val
  pred_file: ${..output_dir}/predictions_${..country}_${.split}/${..checkpoint}.json
  modes:
  - iou
  eval_file: results/metrics
